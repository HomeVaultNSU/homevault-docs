openapi: 3.0.0
info:
  title: Homevault API
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Development server

tags:
  - name: Files
    description: Interaction with the file system

paths:
  /list:
    get:
      tags:
        - Files
      summary: Get list of files and directories
      description: Returns the contents of the specified directory with the ability to filter by nesting depth.
      parameters:
        - name: path
          in: query
          description: Path to directory (default root "/")
          required: false
          schema:
            type: string
            default: "/"
        - name: depth
          in: query
          description: Nesting depth (0 - only current directory, 1 - including subdirectories, etc.)
          required: false
          schema:
            type: integer
            default: 1
            minimum: 0
            maximum: 5
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryListing"
        '404':
          description: Directory not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '400':
          description: Bad request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /upload:
    post:
      tags:
        - Files
      summary: Upload a file
      description: Uploads a file to the specified directory
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UploadRequest"
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"
        '400':
          description: Bad request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /download:
    get:
      tags:
        - Files
      summary: Download a file
      description: Downloads a file from the server
      parameters:
        - name: path
          in: query
          description: Path to the file to download
          required: true
          schema:
            type: string
            example: "/docs/report.pdf"
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '400':
          description: Bad request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


components:
  schemas:

    UploadRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
          description: The file to upload
        path:
          type: string
          description: Target directory path (default root "/")
          default: "/"
      required:
        - file
    
    UploadResponse:
      type: object
      properties:
        path:
          type: string
          example: "/my_folder/file.txt"
      required: [message, path]

    FileItem:
      type: object
      properties:
        name:
          type: string
          example: "file.txt"
        type:
          type: string
          enum: ["F", "D"]
          example: "F"
        size:
          type: integer
          description: Size in bytes (Files only)
          example: 1024
          nullable: true
        modified_at:
          type: string
          format: date-time
          description: Last modified date
          example: "2024-05-20T12:00:00Z"
      required: [name, type, modified_at]

    DirectoryListing:
      type: object
      properties:
        path:
          type: string
          example: "/docs"
        items:
          type: array
          items:
            $ref: "#/components/schemas/FileItem"
        subdirectories:
          type: array

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        timestamp:
          type: string
          example: 2025‑01‑25 17:45:30
      required: [error, timestamp]
