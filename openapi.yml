openapi: 3.0.0
info:
  title: Homevault API
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Development server
  - url: http://localhost:8090
    description: Auth server

# Добавляем секцию security
security:
  - bearerAuth: []

tags:
  - name: Files
    description: Interaction with the file system
  - name: Authorization
    description: Authorization, token retrieval

paths:
  /list:
    get:
      tags:
        - Files
      summary: Get list of files and directories
      description: Returns the contents of the specified directory with the ability to filter by nesting depth.
      # Указываем, что этот эндпоинт требует аутентификации
      security:
        - bearerAuth: []
      parameters:
        - name: path
          in: query
          description: Path to directory (default root "/")
          required: false
          schema:
            type: string
            default: "/"
        - name: depth
          in: query
          description: Nesting depth (0 - only current directory, 1 - including subdirectories, etc.)
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 5
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryListing"
        '404':
          description: Directory not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '400':
          description: Bad request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /upload:
    post:
      tags:
        - Files
      summary: Upload a file
      description: Uploads a file to the specified directory
      # Указываем, что этот эндпоинт требует аутентификации
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload
                path:
                  type: string
                  description: Target directory path (default root "/")
                  default: "/"
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"
        '400':
          description: Bad request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /download:
    get:
      tags:
        - Files
      summary: Download a file
      description: Downloads a file from the server
      # Указываем, что этот эндпоинт требует аутентификации
      security:
        - bearerAuth: []
      parameters:
        - name: path
          in: query
          description: Path to the file to download
          required: true
          schema:
            type: string
            example: "/docs/report.pdf"
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '400':
          description: Bad request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth:
    post:
      tags: [Authorization]
      summary: Create user
      description: Creates a new user account
      # Этот эндпоинт не требует аутентификации
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Authorization]
      summary: Get or decode token
      description: |
        - With username/password: Returns JWT token (Login)
        - With existing token: Returns decoded token information
      # Этот эндпоинт не требует аутентификации
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/LoginRequest"
                - $ref: "#/components/schemas/TokenRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TokenResponse"
                  - $ref: "#/components/schemas/DecodedTokenResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: "john_doe"
        password:
          type: string
          example: "securepassword123"
      required:
        - username
        - password

    RegistrationRequest:
      type: object
      properties:
        username:
          type: string
          example: "new_user"
        password:
          type: string
          example: "securepassword123"
      required:
        - username
        - password

    TokenRequest:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - token

    TokenResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - token

    DecodedTokenResponse:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 123
        role:
          type: string
          example: "USER"
      required:
        - userId
        - role

    UploadResponse:
      type: object
      properties:
        path:
          type: string
          example: "/my_folder/file.txt"
      required:
        - path

    FileItem:
      type: object
      properties:
        name:
          type: string
          example: "file.txt"
        type:
          type: string
          enum: ["F", "D"]
          example: "F"
        size:
          type: integer
          example: 1024
          nullable: true
        lastModifiedAt:
          type: string
          format: date-time
          example: "2024-05-20T12:00:00Z"
      required:
        - name
        - type
        - lastModifiedAt

    DirectoryListing:
      type: object
      properties:
        path:
          type: string
          example: "/docs"
        items:
          type: array
          items:
            $ref: "#/components/schemas/FileItem"
        subdirectories:
          type: array
          items:
            $ref: "#/components/schemas/DirectoryListing"
      required:
        - path
        - items

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "File not found"
        timestamp:
          type: string
          format: date-time
          example: "2025-01-25T17:45:30Z"
      required:
        - error
        - timestamp
    
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Enter your JWT token in the format 'Bearer <token>'"
